#include "U8glib.h"


int led = 6;
int led_rouge = 13;
int gachette = A3;

boolean toggle0 = 0;
boolean enable_frequence = 0;

U8GLIB_SH1106_128X64 u8g(U8G_I2C_OPT_NONE);

const uint8_t img_logo[] PROGMEM = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,248,0,0,0,0,0,0,0,0,0,0,0,0,0,1,131,252,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,252,0,0,0,0,0,0,0,0,3,248,0,0,0,1,1,254,0,0,0,0,0,0,0,0,2,0,0,0,0,1,131,0,0,127,192,0,0,0,0,0,2,0,0,0,0,0,134,0,0,127,224,0,0,0,0,0,2,0,0,0,0,0,204,0,0,255,48,0,0,0,0,0,0,0,0,0,0,0,88,0,0,254,24,0,0,0,0,0,1,0,0,0,0,0,112,0,1,254,12,0,0,0,0,0,2,160,0,0,0,0,32,0,1,252,4,0,0,0,0,0,2,160,12,3,0,0,0,0,3,254,8,0,0,0,0,0,2,160,14,7,0,0,0,0,0,3,8,0,0,0,0,0,3,192,15,15,0,0,0,0,15,249,144,0,0,0,0,0,0,0,7,158,0,0,0,0,15,236,208,0,0,0,0,0,2,64,3,252,0,0,0,0,31,230,96,0,0,0,0,0,2,160,1,248,0,0,0,0,31,195,32,0,0,0,0,0,2,160,3,252,0,0,0,0,63,193,128,0,0,0,0,0,2,160,7,158,0,0,0,0,63,128,192,0,0,0,0,0,1,32,15,15,0,0,0,0,127,128,128,0,0,0,0,0,0,0,14,7,0,0,254,127,128,193,128,63,224,0,0,0,1,192,12,3,0,1,4,129,0,97,0,24,48,0,0,0,2,160,0,0,0,2,9,2,0,51,0,8,24,0,0,0,2,160,0,0,0,2,25,6,0,26,0,12,8,0,0,0,2,160,0,0,0,4,18,4,0,14,0,4,12,0,0,0,2,192,15,255,0,4,50,12,0,4,0,6,4,0,0,0,0,0,15,255,0,8,36,8,0,0,0,2,6,0,0,0,3,224,15,255,0,15,231,248,0,0,0,3,254,0,0,0,0,64,14,0,0,7,243,252,0,4,0,7,252,0,0,0,0,32,14,0,0,7,243,252,0,6,0,7,252,0,0,0,0,32,14,0,0,3,249,254,0,30,0,15,248,0,0,0,0,64,14,0,0,3,249,254,0,31,0,15,248,0,0,0,0,0,0,0,0,1,252,255,0,63,0,31,240,0,0,0,0,0,0,0,0,0,254,127,128,255,128,63,224,0,0,0,0,8,0,0,0,0,0,0,127,255,128,0,0,0,0,0,0,8,15,255,0,0,0,0,32,127,192,0,0,0,0,0,3,248,15,255,0,0,0,0,32,63,128,0,0,0,0,0,0,8,15,255,0,0,0,0,16,63,32,0,0,0,0,0,0,8,0,0,0,0,0,0,16,30,96,0,0,0,0,0,1,0,0,0,0,0,0,0,8,12,240,0,0,0,0,0,2,160,0,0,0,0,0,0,15,249,240,0,0,0,0,0,2,160,15,255,0,0,0,0,0,3,248,0,0,0,0,0,2,160,15,255,0,0,0,0,3,255,248,0,0,0,0,0,3,192,15,255,0,0,32,0,1,3,252,0,0,0,0,0,0,0,0,0,0,0,112,0,1,1,252,0,0,0,0,0,4,192,0,0,0,0,120,0,0,129,248,0,0,0,0,0,5,32,0,0,0,0,252,0,0,128,240,0,0,0,0,0,5,32,0,0,0,0,254,0,0,64,96,0,0,0,0,0,5,32,0,0,0,1,255,0,0,127,192,0,0,0,0,0,3,224,0,0,0,1,255,254,0,0,0,0,0,0,0,0,0,0,0,0,0,3,254,4,0,0,0,0,0,0,0,0,0,0,0,0,0,1,252,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
const uint8_t img_score[] PROGMEM = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,112,0,0,0,0,0,0,0,0,0,0,0,0,8,0,64,16,0,0,0,0,0,0,0,0,0,0,0,0,8,0,95,208,0,0,0,0,0,0,0,0,0,63,128,60,8,0,0,0,0,0,0,0,0,0,0,0,0,63,192,126,8,0,31,192,0,0,0,0,0,0,0,0,0,63,160,255,8,0,0,0,0,0,0,0,0,0,0,0,0,63,161,255,8,0,95,208,0,0,0,0,0,0,0,0,0,63,163,254,8,0,64,16,0,0,0,0,1,192,0,0,0,63,167,252,8,0,112,112,0,0,0,0,7,112,0,0,0,63,163,254,8,0,0,0,0,0,0,0,12,24,0,0,0,63,161,255,8,0,0,0,0,0,0,0,8,8,0,0,0,63,160,255,8,0,0,0,0,0,0,0,24,12,0,0,0,63,224,126,8,0,0,0,0,0,0,0,16,4,0,0,0,63,128,60,8,0,0,0,0,0,0,112,24,12,7,0,0,0,0,0,8,136,0,0,0,0,1,220,8,8,29,192,0,0,0,0,9,20,0,0,0,0,3,6,12,24,48,96,0,0,0,0,9,20,0,0,0,0,2,2,7,112,32,32,0,8,128,136,9,20,0,0,0,0,6,3,1,192,96,48,0,16,65,4,8,228,0,0,0,0,4,1,0,0,64,16,0,18,65,36,8,0,0,0,0,0,6,3,0,0,96,48,0,18,65,36,9,4,0,0,1,252,2,2,0,0,32,32,0,13,128,216,9,252,0,0,0,20,3,6,0,0,48,96,0,0,0,0,9,4,0,0,0,20,1,220,0,0,29,192,0,6,0,96,8,0,0,0,0,20,0,112,0,0,7,0,0,5,0,80,9,252,0,0,1,232,0,0,0,0,0,0,0,4,128,72,9,0,0,0,0,0,0,0,0,0,0,0,0,4,64,68,9,0,0,0,0,224,0,0,0,0,0,0,0,31,193,252,9,0,0,0,1,16,14,0,0,0,0,28,0,0,0,0,8,0,0,0,1,16,59,128,0,224,0,127,0,8,128,136,8,60,0,0,1,16,96,192,1,48,0,255,128,16,65,4,8,192,0,0,0,224,64,64,7,24,0,255,128,18,65,36,9,0,0,0,0,0,192,96,3,144,1,255,192,18,65,36,8,192,0,0,1,252,128,32,6,248,1,255,192,13,128,216,8,60,0,0,1,32,192,96,3,144,1,255,192,0,0,0,8,0,8,128,1,16,64,64,7,24,0,255,128,0,0,0,9,248,16,64,1,16,96,192,1,48,0,255,128,0,0,0,8,20,18,64,0,224,59,128,0,224,0,127,0,0,0,0,8,20,18,64,0,0,14,0,0,0,0,28,0,0,0,0,8,20,13,128,1,244,0,0,0,0,0,0,0,0,0,0,9,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,6,0,1,240,0,0,0,0,0,0,0,0,0,0,9,4,5,0,0,16,0,112,0,0,7,0,0,0,0,0,9,252,4,128,0,16,1,220,0,0,29,192,0,0,0,0,9,4,4,64,0,16,3,6,0,0,48,96,0,0,0,0,8,0,31,192,1,224,2,2,0,0,32,32,0,0,0,0,9,252,0,0,0,0,6,3,1,192,96,48,0,0,0,0,8,8,0,0,0,0,4,1,7,112,64,16,0,0,0,0,8,16,9,0,0,0,6,3,12,24,96,48,0,0,0,0,8,32,0,0,0,0,2,2,8,8,32,32,0,0,0,0,9,252,0,0,0,0,3,6,24,12,48,96,0,0,0,0,8,0,8,128,0,0,1,220,16,4,29,192,0,0,0,0,8,0,16,64,0,0,0,112,24,12,7,0,0,0,0,0,8,0,18,64,0,0,0,0,8,8,0,0,0,0,0,0,8,0,18,64,0,0,0,0,12,24,0,0,0,0,0,0,8,0,13,128,0,0,0,0,7,112,0,0,0,0,0,0,8,0,0,0,0,0,0,0,1,192,0,0,0,0,0,0,8,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,4,128,0,0,0,0,0,0,0,0,0,0,0,0,8,0,4,64,0,0,0,0,0,0,0,0,0,0,0,0,8,0,31,192,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};

int imgX;
int imgY;

int munition = 500;
int mode_tir = 3;

void setup()  
{
  // Open serial communications and wait for port to open:
  Serial.begin(57600);
  Serial.println("Hello !!");
  
  pinMode(led, OUTPUT);
  digitalWrite(led, HIGH);
  
  pinMode(led_rouge, OUTPUT);
  
  pinMode(gachette, INPUT);
  
  
  imgX = 0;
  imgY = -1;

  cli();//stop interrupts
  //set timer1 interrupt at 1Hz
  TCCR1A = 0;// set entire TCCR1A register to 0
  TCCR1B = 0;// same for TCCR1B
  TCNT1  = 0;//initialize counter value to 0
  // set compare match register for 1hz increments
  OCR1A = 210;// = (16*10^6) / (1000*8) - 1 (must be <65536)
  // turn on CTC mode
  TCCR1B |= (1 << WGM12);
  // Set CS12 and CS10 bits for 1 prescaler
  TCCR1B |= (1 << CS10);// | (1 << CS10);  
  // enable timer compare interrupt
  TIMSK1 |= (1 << OCIE1A);
  sei();//allow interrupts
}


void loop() // run over and over
{
  digitalWrite(led_rouge, HIGH);
  
  if(mode_tir > 0 && digitalRead(gachette))
  {
    send_id(123);
    mode_tir--;
  }
  if(!digitalRead(gachette)) mode_tir = 1;
  
  send_id(0);
  
  
  
  
  
  
  
  if(imgY==-2)
  {
    if(u8g.nextPage()) imgY=0;
    else imgY=-1;
  }  
  else if(imgY==-1)
  {
    u8g.firstPage();
    imgY=0;
  }
  else
  {
  //  u8g.drawBitmapP( (imgX*8), imgY, 1, 1, (img_logo+(imgY*16)+imgX));
    
    u8g.drawBitmapP( (imgX*8), imgY, 1, 1, (img_score+(imgY*16)+imgX));

    imgX++;
    if(imgX>16) { imgX=0; imgY++; }
    if(imgY>64) imgY=-2;
  }
  
  digitalWrite(led_rouge, LOW);
}




#define TEMPS_HIGH 1000
int send_id(byte id)
{
  static int etat=0;
  static unsigned long debut;
  static String myStr;
  static int bits;
  
  if(etat==0)
  {
    if(id != 0)
    {
      myStr = String(id,BIN);
      while(myStr.length() < 8) myStr = "0"+myStr; //myStr.concat(String('0'),myStr);
      
      Serial.println(myStr);
      debut = micros();
      etat=1;
    }
    else return 0;
  }
  
  else if(etat==1)
  {
    enable_frequence = 1;
    if((micros()-debut) >= 9*TEMPS_HIGH)
    {
      etat=2;
    }
  }
  
  else if(etat==2)
  {
    enable_frequence = 0;
    if((micros()-debut) >= 10*TEMPS_HIGH)
    {
      etat=10;
      bits=-1;
    }
  }
  
  else if(etat>=10 && etat <= 25)
  {
    if(etat%2 == 0)
    {
      enable_frequence = 1;
      if((micros()-debut) >= (etat+1)*TEMPS_HIGH) { bits++; etat++; }
    }
    else
    {
      if(myStr[bits]=='0') enable_frequence = 0;
      else enable_frequence = 1;
      if((micros()-debut) >= (etat+1)*TEMPS_HIGH) etat++;
    }
  }
  
  else if(etat == 26)
  {
    enable_frequence = 1;
    if((micros()-debut) >= (etat+1)*TEMPS_HIGH)
    {
      etat=0;
      enable_frequence = 0;
    }
  }

  return 1;
}


ISR(TIMER1_COMPA_vect)
{
  if(enable_frequence)
  {
    if(toggle0)
      PORTD |= 0b1000000;
    else
      PORTD &= 0b0111111;
  }
  else PORTD |= 0b1000000;
  
  toggle0 = !toggle0;
}
